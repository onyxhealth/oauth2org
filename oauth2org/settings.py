"""
Django settings for OAuth2.org project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from collections import OrderedDict
import dj_database_url
from django.contrib.messages import constants as messages
from getenv import env
from django.utils.translation import ugettext_lazy as _
from .utils import bool_env

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production a secret!
SECRET_KEY = env('SECRET_KEY', '@+ttixefm9-bu1eknb4k^5dj(f1z0^97b$zan9akdr^4s8cc54')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool_env(env('DEBUG', True))

# PYTHON SOCIAL AUTH security setting.
if DEBUG:
    # Never run a production system in DEBUG or with insecure transport turned
    # off (i.e. http instead of https)
    os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'

# Allow everyone
ALLOWED_HOSTS = ['*', ]

# A function to install app only if they are installed.


def _enable_conditional(application):
    global INSTALLED_APPS
    try:
        __import__(application)
        INSTALLED_APPS += (application,)
    except ImportError:
        pass


# Application definition
INSTALLED_APPS = [

    # Django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # In-house applications
    # Djmongo is installed automatically if the django-djmongo
    # packages is installed in the environment
    # Access Djmongo by going to the url /djm on your instance.
    # A running MongoDB server is also needed.
    # Set the MONGODB_CLIENT setting for your environment.


    # Required apps, These are generally necessary for expected Oauth2 Provider behavior.
    # Running only some of these may result in errors and/or abnormal behavior.
    # This is the core sublassing of Django OAuth Toolkit (DoT)'s abstract classes.
    'apps.dot_ext.apps.dot_extConfig',  # Reference to 'apps.dot_ext'. This minor deviation added for an import workaround.
    'apps.accounts',  # For basic account management.
    'apps.home',  # Home screen
    'apps.wellknown',  # /.well-known/ URLs
    'apps.verifymyidentity',  # Upstream Identity provider
    'apps.testclient',  # Tests the Patient Facing API by functioning as a client (3rd party app).
    'apps.authorization',  # Core
    'apps.capabilities',  # DoT Extensions for scopes
    'apps.pkce',  # PKCE support. TODO move into DOT.
    # Dynamic client reg is optional
    'apps.dynamicreg',  # Dynamic Client Reg Protocol

    # Enterprise feature apps enabled enabled by default.

    # Provider_directory is an public FHIR API based on MongoDB. It supports FHIR JSON, JSON, and CSV.
    'apps.provider_directory',
    # An FHIR Patient facing API that uses MongoDB as its backend. It supports FHIR JSON.
    'apps.patientface_api',


    # Enterprise feature apps not enabled by default
    # These are advanced features for enterprise customers.


    # 'apps.healthcards',      # SMART Health Card implementation.
    # 'apps.hie', Intersystems HIE support is not activated by default.
    # 'apps.api',  # CDA API App is used in conjunction with a  CDA source such as an HIE.
    # 'apps.fhirproxy', # A patient-facing API proxy using HAPI, Smile CDR, or Microsoft FHIR Server.

    # Accept ADT/x12 message stream and build identifier responses. (Experimental, but stable.)
    # 'apps.adt', # Accept ADT/x12 message stream and build identifier responses.




    # 3rd Party Python/django libraries managed by others ---------------------------
    # Therese are all generally required unless noted otherwise.
    # Running only some of these may result in errors and/or abnormal behavior.
    'oauth2_provider',  # Django OAuth Toolkit (DoT) . Must come after 'apps.dot_ext'.
    'waffle',  # a feature toggle.
    'rest_framework',  # REST Framework.  You can create APIs with this too!
    'widget_tweaks',  # UI lib
    'corsheaders',    # CORS Headers
    'bootstrapform',  # generate bootstrap forms
    # Python Social Auth. # Python Social Auth is used to communicate to an upstream Identity Provider (IdP)
    'social_django',  # VerifyMyIdentity is the default configuration, but other OIDC  IdPs are supported such as Okta and Google.

]

# Add Djmongo if it is already installed.
_enable_conditional('djmongo')
_enable_conditional('djmongo.console')
_enable_conditional('djmongo.read')
_enable_conditional('djmongo.dataimport')
_enable_conditional('djmongo.write')
_enable_conditional('djmongo.aggregations')


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]


ROOT_URLCONF = 'oauth2org.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',
            ],
        },
    },
]

WSGI_APPLICATION = 'oauth2org.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=env('DATABASES_CUSTOM',
                    'sqlite:///{}/db/db.sqlite3'.format(BASE_DIR))
    ),
}

MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'danger',
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'UserAttributeSimilarityValidator')
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'MinimumLengthValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'CommonPasswordValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'NumericPasswordValidator'),
    },
]

LOGOUT_REDIRECT_URL = 'home'


# Change these for production
USER_ID_SALT = env('DJANGO_USER_ID_SALT', "6E6F747468657265616C706570706572")
USER_ID_ITERATIONS = int(env("DJANGO_USER_ID_ITERATIONS", "2"))

USER_ID_TYPE_CHOICES = (('H', 'HICN'),
                        ('M', 'MBI'))

USER_ID_TYPE_DEFAULT = "H"
DEFAULT_SAMPLE_FHIR_ID = env("DJANGO_DEFAULT_SAMPLE_FHIR_ID", "-20140000008325")


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'sitestatic'),
]

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'collectedstatic')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# AWS Credentials need to support SES, SQS and SNS
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', 'change-me')
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', 'change-me')


# Django Oauth Tookit settings and customizations
# Application model settings
APP_LOGO_SIZE_MAX = env('APP_LOGO_SIZE_MAX', '100')
APP_LOGO_WIDTH_MAX = env('PP_LOGO_WIDTH_MAX', '128')
APP_LOGO_HEIGHT_MAX = env('APP_LOGO_HEIGHT_MAX', '128')

OAUTH2_PROVIDER_APPLICATION_MODEL = 'dot_ext.Application'
OAUTH2_PROVIDER_GRANT_MODEL = 'oauth2_provider.Grant'
OAUTH2_PROVIDER = {
    'OAUTH2_VALIDATOR_CLASS': 'oauth2org.oauth2_validators.SingleAccessTokenValidator',
    'OAUTH2_SERVER_CLASS': 'apps.dot_ext.oauth2_server.Server',
    'SCOPES_BACKEND_CLASS': 'apps.dot_ext.scopes.CapabilitiesScopes',
    'OAUTH2_BACKEND_CLASS': 'apps.dot_ext.oauth2_backends.OAuthLibSMARTonFHIR',
    'ALLOWED_REDIRECT_URI_SCHEMES': ['https', 'http'],
}

# These choices will be available in the expires_in field
# of the oauth2 authorization page.
DOT_EXPIRES_IN = (
    (86400 * 365 * 5, _('5 Years')),
    (86400, _('1 Day')),
    (86400 * 7, _('1 Week')),
    (86400 * 365, _('1 Year')),
    (86400 * 365 * 3, _('3 Years')),
    (86400 * 365 * 10, _('10 Years')),
    (86400 * 365 * 100, _('Forever')),
)

# DOT +
GRANT_AUTHORIZATION_CODE = "authorization-code"
# GRANT_PASSWORD = "password"
# GRANT_CLIENT_CREDENTIALS = "client-credentials"
GRANT_TYPES = (
    (GRANT_AUTHORIZATION_CODE, _("Authorization code")),
    # (GRANT_IMPLICIT, _("Implicit")),
    # (GRANT_PASSWORD, _("Resource owner password-based")),
    # (GRANT_CLIENT_CREDENTIALS, _("Client credentials")),
)

# List of beneficiary personal information resource type scopes
BENE_PERSONAL_INFO_SCOPES = ["patient/Patient.read", "profile"]

# OAUTH SETTINGS  - OLD Settings
""" OAUTH2_PROVIDER = {
    'OAUTH2_VALIDATOR_CLASS': 'oauth2org.oauth2_validators.SingleAccessTokenValidator',
    'SCOPES': {"read": "Read scope",
               "patient/*.read": "Permission to read any resource for the current patient",
               "profile": "read the user's profile"},
    'DEFAULT_SCOPES': ['patient/*.read', 'profile'],
    'REQUEST_APPROVAL_PROMPT': 'auto',
    'ACCESS_TOKEN_EXPIRE_SECONDS': int(env('ACCESS_TOKEN_EXPIRE_SECONDS', 315360000))
 } """


AUTHENTICATION_BACKENDS = (
    # 'social_core.backends.google_openidconnect.GoogleOpenIdConnect',
    'apps.verifymyidentity.backends.verifymyidentity.VerifyMyIdentityOpenIdConnect',
    'django.contrib.auth.backends.ModelBackend',
    # Okta OIDC support
    'social_core.backends.okta_openidconnect.OktaOpenIdConnect',
)

CORS_ORIGIN_ALLOW_ALL = True

SOCIAL_AUTH_PIPELINE = [
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    # Get the username as the sub in  OIDC
    'apps.verifymyidentity.pipeline.get_subject_id.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
    'apps.accounts.pipeline.oidc.save_profile',
    'apps.patientface_api.pipeline.identifier_to_crosswalk.set_crosswalk_with_id_token',
]

if DEBUG:
    SOCIAL_AUTH_PIPELINE.append('social_core.pipeline.debug.debug')

# Verify My Identity support
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_KEY = env(
    'SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_KEY',
    'oauth2org@verifymyidentity')
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_SECRET = env(
    'SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_SECRET',
    'oauth2org@verifymyidentity-change-this-secret')
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_SCOPE = ['openid', ]
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_IGNORE_DEFAULT_SCOPE = True
SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT = env(
    'SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT',
    'http://verifymyidentity:8000')

# Okta Support
SOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL = env("SOCIAL_AUTH_OKTA_OPENIDCONNECT_API_URL",
                                             'https://example.okta.com/oauth2')
SOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY = env('SOCIAL_AUTH_OKTA_OPENIDCONNECT_KEY', '')
SOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET = env('SOCIAL_AUTH_OKTA_OPENIDCONNECT_SECRET', '')
SOCIAL_AUTH_PING_OPENIDCONNECT_KEY = env('SOCIAL_AUTH_PING_OPENIDCONNECT_KEY', '')
SOCIAL_AUTH_PING_OPENIDCONNECT_SECRET = env('SOCIAL_AUTH_PING_OPENIDCONNECT_SECRET', '')


# Set to True when using in a reverse proxy such as Gunicorn and Nginx
SOCIAL_AUTH_REDIRECT_IS_HTTPS = bool_env(
    env('SOCIAL_AUTH_REDIRECT_IS_HTTPS', False))

REMOTE_LOGOUT_ENDPOINT = "%s/api/v1/remote-logout" % (
    SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT)

DATE_INPUT_FORMATS = ['%Y-%m-%d']  # , '%d-%m-%Y']

LOGIN_REDIRECT_URL = 'home'
LOGIN_URL = '/social-auth/login/verifymyidentity-openidconnect'

EXTERNAL_AUTH_NAME = "Verify My Identity / OpenID Connect"

PROJECT_NAME = env('DJANGO_PROJECT_NAME', 'instance of OAuth2org')


TOP_LEFT_TITLE = env('DJANGO_TOP_LEFT_TITLE', 'OAuth2.org')

APPLICATION_TITLE = env('DJANGO_APPLICATION_TITLE',
                        'OAuth2.org')
ORGANIZATION_TITLE = env(
    'DJANGO_ORGANIZATION_TITLE',
    'Videntity')

CONTACT_PHONE = env('CONTACT_PHONE', '1-888-871-1017')

CONTACT_EMAIL = env('CONTACT_EMAIL', 'sales@videntity.com')

KILLER_APP_URI = env('KILLER_APP_URI', 'https://example.com')

ORGANIZATION_URI = env('DJANGO_ORGANIZATION_URI', 'https://videntity.com')
POLICY_URI = env('DJANGO_POLICY_URI',
                 'https://example.com/privacy-policy-1.0.html')
POLICY_TITLE = env('DJANGO_POLICY_TITLE', 'Privacy Policy')
TOS_URI = env('DJANGO_TOS_URI',
              'https://example.com/terms-of-service-1.0.html')
TOS_TITLE = env('DJANGO_TOS_TITLE', 'Terms of Service')
TAG_LINE_1 = env('DJANGO_TAG_LINE_1', '')
TAG_LINE_2 = env('DJANGO_TAG_LINE_2', '')
USER_DOCS_URI = env(
    'USER_DOCS_URI', "https:/github.com/TransparentHealth/oauth2org")
USER_DOCS_TITLE = "User Documentation"
USER_DOCS = "User Docs"
# LINKS TO DOCS
DEVELOPER_DOCS_URI = "https:/github.com/TransparentHealth/oauth2org"
DEVELOPER_DOCS_TITLE = "Open Source"
DEVELOPER_DOCS = "Open Source"
DEFAULT_DISCLOSURE_TEXT = """
    This system may be monitored, recorded and
    subject to audit. Improper use of this system or
    its data may result in civil and criminal penalties.
    """

DISCLOSURE_TEXT = env('DISCLOSURE_TEXT', DEFAULT_DISCLOSURE_TEXT)

HOSTNAME_URL = env('HOSTNAME_URL', 'http://oauth2org:8001')

VMI_SIGNUP_URL = "%s/accounts/create-account/%s/?next=%s" % \
                 (SOCIAL_AUTH_VERIFYMYIDENTITY_OPENIDCONNECT_OIDC_ENDPOINT,
                  APPLICATION_TITLE,
                  HOSTNAME_URL)


CALL_MEMBER = "person"
CALL_MEMBER_PLURAL = "people"
CALL_ORGANIZATION = "organization"
CALL_ORGANIZATION_PLURAL = "organizations"

DATA_SOURCE_TITLE = env('DATA_SOURCE_TITLE',
                        'Any State Health Information Exchange')
DATA_SOURCE_TITLE_SHORT = env('DATA_SOURCE_TITLE', 'Any state, USA')
# Default config for consumer/member/patient facing APIs.  Adjust for
# other use cases
PROTECTED_RESOURCE_TITLE = env(
    'PROTECTED_RESOURCE_TITLE',
    'read-only access to your personal health information')

# For Patient FACING API:Regardless of what is in MongoDB, allow these.
FHIR_PATIENT_API_RESOURCES_SUPPORTED = (
    'Patient',
    'Practitioner',
    'Organization',
    'Observation',
    'Condition',
    'Medication',
    'MedicationStatement',
    'MedicationOrder',
    'AllergyIntolerance',
    'DiagnosticReport',
    'Procedure',
    'CarePlan',
    'Immunization',
    'Device',
    'Goal',
    'Coverage',
    'ExplanationOfBenefit')

SETTINGS_EXPORT = [
    'DEBUG',
    'FHIR_PATIENT_API_RESOURCES_SUPPORTED',
    'HOSTNAME_URL',
    'ALLOWED_HOSTS',
    'APPLICATION_TITLE',
    'STATIC_URL',
    'STATIC_ROOT',
    'DEVELOPER_DOCS_URI',
    'DEVELOPER_DOCS_TITLE',
    'ORGANIZATION_TITLE',
    'PROJECT_NAME',
    'CONTACT_PHONE',
    'CONTACT_EMAIL',
    'POLICY_URI',
    'POLICY_TITLE',
    'DISCLOSURE_TEXT',
    'TOS_URI',
    'TOS_TITLE',
    'TAG_LINE_1',
    'TAG_LINE_2',
    'EXTERNAL_AUTH_NAME',
    'USER_DOCS_URI',
    'USER_DOCS',
    'DEVELOPER_DOCS',
    'USER_DOCS_TITLE',
    'VMI_SIGNUP_URL',
    'CALL_MEMBER',
    'CALL_MEMBER_PLURAL',
    'CALL_ORGANIZATION',
    'CALL_ORGANIZATION_PLURAL',
    'DATA_SOURCE_TITLE',
    'PROTECTED_RESOURCE_TITLE',
    'DATA_SOURCE_TITLE_SHORT',
    'TOP_LEFT_TITLE',
    'KILLER_APP_URI',
]


# These settings are for connection to InterSystems APIs for Health Information Exchange (HIE)
# These settings are exclusive from FHIR settings. The HIE interface is not installed by default and
# implementations may ignore these settings.
HIE_TOKEN_API_URI = env('HIE_TOKEN_API_URI', 'https://integration.example.com:6443/')
HIE_PATIENT_API_URI = env('HIE_PATIENT_API_URI', 'https://integration.example.com:5443')
HIE_PHRREGISTER_API_URI = "%s/PHRREGISTER" % (HIE_PATIENT_API_URI)
HIE_ACTIVATESTAGEDUSER_API_URI = "%s/ACTIVATESTAGEDUSER" % (HIE_PATIENT_API_URI)
HIE_CONSUMERDIRECTIVE_API_URI = "%s/CONSUMERDIRECTIVE" % (HIE_PATIENT_API_URI)
HIE_GETDOCUMENT_API_URI = "%s/GETDOCUMENT" % (HIE_PATIENT_API_URI)
HIE_WORKBENCH_USERNAME = env('HIE_WORKBENCH_USERNAME', '')
HIE_WORKBENCH_PASSWORD = env('HIE_WORKBENCH_PASSWORD', '')
HIE_BASIC_AUTH_PASSWORD = env('HIE_BASIC_AUTH_PASSWORD', '')
HIE_BASIC_AUTH_USERNAME = env('HIE_BASIC_AUTH_USERNAME', '')
HIE_CLIENT_CERT = env('HIE_CLIENT_CERT', """
-----BEGIN CERTIFICATE-----
replace with your cert or set in the env var.
-----END CERTIFICATE-----""")
HIE_CLIENT_PRIVATE_KEY = env('HIE_CLIENT_PRIVATE_KEY', """
-----BEGIN PRIVATE KEY-----
replace with your private key or set in the env var.
-----END PRIVATE KEY-----
""")
HIE_CLIENT_CERT_FILEPATH = env('HIE_CLIENT_CERT_FILEPATH', 'client-cert.pem')
HIE_CLIENT_PRIVATE_KEY_FILEPATH = env(
    'HIE_CLIENT_PRIVATE_KEY_FILEPATH', 'client-private-key.pem')

# Default rate limit on the login screen and other sensitive URL.
LOGIN_RATELIMIT = env('LOGIN_RATELIMIT', '100/h')

# CDA2FHIR is an add-on, optional component, to this project.
# See https://github.com/TransparentHealth/cda2fhir-service
# is used to convert Intersystems CDA. At the time of this writing
# Intersystems doesn't have a usable FHIR interface.
# Again not used if you have an actual FHIR server like HAPI or Microsoft.
# Should be operated behind a firewall and in ssl/https in production.

CDA2FHIR_SERVICE = env('CDA2FHIR_SERVICE', 'http://cda2fhirservice.example.com')
CDA2FHIR_SERVICE_URL = "%s/api/convert" % (CDA2FHIR_SERVICE)

# ----------------- End of HIE interface settings


# Expire in 30 minutes
SESSION_COOKIE_AGE = int(env('SESSION_COOKIE_AGE', int(30 * 60)))

# Expire when browser is closed.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_SAMESITE = None


# Proxy HAPI Microsoft FHIR, etc.  These settings are for the "bluebutton"or other FHIR Server
# FHIR Server to Proxy (Default) - with trailing slash on HAPI

DEFAULT_FHIR_SERVER = env('DEFAULT_FHIR_SERVER',
                          "http://hapi.example.com:8080/fhir/baseDstu4/")

DEFAULT_FHIR_URL_PREFIX = env('DEFAULT_FHIR_URL_PREFIX', "/proxy/v1/fhir4/baseDstu4")
# Proxied requests will have these URLs swapped.
DEFAULT_OUT_FHIR_SERVER = HOSTNAME_URL + DEFAULT_FHIR_URL_PREFIX


# For PUBLIC PROVIDER  FACING API: Regardless of what is in MongoDB, allow these.
FHIR_PROVIDER_DIRECTORY_API_RESOURCES_SUPPORTED = (
    'Practitioner',
    'Organization',
    'Location',
)


FHIR_PATIENT_API_RESOURCE_TO_ID_MAP = OrderedDict()
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Patient'] = ""
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Observation'] = "subject"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Condition'] = "subject"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['AllergyIntolerance'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Medication'] = ""
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['MedicationStatement'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['MedicationOrder'] = ""
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['DiagnosticReport'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Procedure'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['CarePlan'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Immunization'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Device'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Goal'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['ExplanationOfBenefit'] = "patient"
FHIR_PATIENT_API_RESOURCE_TO_ID_MAP['Coverage'] = ""


# Backend FHIR server client credentials
# These may be used to connect to Microsoft Azure Healthcare APIs
# Not needed for HAPI.  Change these value for your Microsoft FHIR
# server

BACKEND_FHIR_CLIENT_ID = env(
    'BACKEND_FHIR_CLIENT_ID', "change-me")
BACKEND_FHIR_CLIENT_SECRET = env(
    'BACKEND_FHIR_CLIENT_SECRET', "change-me")
BACKEND_FHIR_RESOURCE = env('BACKEND_FHIR_RESOURCE',
                            DEFAULT_FHIR_SERVER)
BACKEND_FHIR_TOKEN_ENDPOINT = env('BACKEND_FHIR_TOKEN_ENDPOINT',
                                  "https://login.microsoftonline.com/example1234/oauth2/token")

# Change if using AWS and in another region.
AWS_DEFAULT_REGION = env('AWS_DEFAULT_REGION', 'us-east-1')

# Blank means skip the EC2 Parameter store. Default behavior is to rely on
# local instance's environment variables. The project should read on a .env
# file from the project's root directory. Many ways to accomplish this
# including with Docker, Gunicorn startup, and others.  If you are not using
# EC2 Parameter store, you can ignore this setting.
EC2PARAMSTORE_4_ENVIRONMENT_VARIABLES = env(
    'EC2PARAMSTORE_4_ENVIRONMENT_VARIABLES', "EC2_PARAMSTORE")


# Login options.
# VPC values gets added to the login format.
# This helps identify your nodes/workers.
VPC_ENV = env('VPC_ENV', "UNKNOWN")

# Role Type  gets added to the login format.
# This helps identify the role of your workers.
ROLE_TYPE = env('ROLE_TYPE', "NOT_SET")

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(process)-5d %(thread)d %(name)-50s env:' + VPC_ENV + ':' + ROLE_TYPE + ' %(levelname)-8s %(message)s'
        },
        'simple': {
            'format': '[%(asctime)s] %(name)s env:' + VPC_ENV + ':' + ROLE_TYPE + '%(levelname)s %(message)s',
            'datefmt': '%d/%b/%Y %H:%M:%S'
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'logging.handlers.SysLogHandler': {
            'level': 'DEBUG',
            'class': 'logging.handlers.SysLogHandler',
            'facility': 'local7',
            'formatter': 'verbose',
            'address': '/dev/log',
        }
    },
    'loggers': {
        # root logger
        'oauth2org': {
            'handlers': ['console', 'logging.handlers.SysLogHandler'],
            'propagate': True,
            'level': 'INFO',
            'formatter': 'verbose',
            'disabled': False,
        },
        'oauth2org_debug': {
            'handlers': ['console', 'logging.handlers.SysLogHandler'],
            'level': 'DEBUG',
            'formatter': 'verbose',
            'propagate': True,
        },
    },
}


LOGIN_RATELIMIT = env('LOGIN_RATELIMIT', '100/h')

# Hide the location of the admin. Diabled by default.
ADMIN_REDIRECTOR = env('ADMIN_REDIRECTOR', '')

# Djmongo settings.  DjMongo is optional for the OAuth2org project.
# It is a tool for building APIs that support CSV and JSON.
# Djmongo works with OAuth2org.
# It's UI is accessed by going to http://localhost:8000/djm
# If False, only show all DBs. If true show DB's with matching group.

DJMONGO_DB_GROUPS = bool_env(env('DJMONGO_DB_GROUPS', False))
# This set the database connection for all of the Djmongo tools.
MONGODB_CLIENT = env('MONGODB_CLIENT', 'mongodb://localhost:27017/')


# MongoDB-based Provider Directory settings.  The default FHIR database name is "fhir4".
# Each MongoDB Collection within the database has the name of the FHIR Resource.
# Practitioner, Organization, Etc.
# Djmongo is not required for this application to function but it is still

PROVIDER_DIRECTORY_MONGODB_DATABASE_NAME = env('PROVIDER_DIRECTORY_MONGODB_DATABASE_NAME', "fhir4")
# Limit the PD search results bu this number
PROVIDER_DIRECTORY_SEARCH_LIMIT = int(env('PROVIDER_DIRECTORY_SEARCH_LIMIT', "3"))
PROVIDER_DIRECTORY_FHIR_BASE_URI = HOSTNAME_URL + env('PATIENT_ACCESS_FHIR_BASE_URI', "/provider-directory/fhir/R4/")

PATIENT_ACCESS_MONGODB_DATABASE_NAME = env('PATIENT_ACCESS_MONGODB_DATABASE_NAME', "fhir4")
PATIENT_ACCESS_FHIR_BASE_URI = HOSTNAME_URL + env('PATIENT_ACCESS_FHIR_BASE_URI', "/patient-facing-api/fhir/v1/R4/")

# Whitelabel branding and styling.  These settings allow you to further brand the project for your user.

# These set the main homepage when a user is not authenticated.
HOMEPAGE_TEMPLATE = env('HOMEPAGE_TEMPLATE', "index.html")
# Replace this template to change what your user sees when logged in.
HOMEPAGE_AUTHENTICATED_TEMPLATE = env('HOMEPAGE_AUTHENTICATED_TEMPLATE', "authenticated-home.html")

# Change this template to brand and style your login or to change the upstream Identity provider.
LOGIN_TEMPLATE = env('LOGIN_TEMPLATE', "login.html")
